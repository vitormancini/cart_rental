1 - Instalando o Typescript no projeto
    * npm install --save-dev typescript

2 - Instalando o express
    * npm install express --save

3 - Instalando o types do express como dependência de desenvolvimento:
    * npm install --save-dev @types/express

4 - Iniciando o Typescript
    * tsc --init
    * Será criado o arquivo tsconfig.json, no qual faremos algumas configurações
    * No arquivo tsconfig.json, na opção outDir, indicar a pasta ./dist, onde serão criados os arquivos .js sempre que rodar o comando tsc

5 - Instalando a biblioteca ts-node-dev como dependência de desenvolvimento:
    * npm install ts-node-dev --save-dev

6 - Adicionando o script no arquivo package.json:
    * "dev": "ts-node-dev --inspect --transpile-only --ignore-watch node_modules --respawn src/server.ts"
    * Quando quiser rodar o servidor basta digitar o comando "npm run dev"
    * No arquivo tsconfig.json comentar a opção "strict: true"

7 - Cada tabela do diagrama será um domínio e terá seu arquivo de rota espcífico

8 - Instalando biblioteca de UUID:
    * npm install --save uuid
    * npm install --save-dev @types/uuid

9 - Criando modelo para o domínio de categorias
    * Dentro de src, criar pasta model
    * Dentro da pasta model, criar o arquivo Category.ts
    * O construtor da classe é responsável por verificar se o objeto já possui um UUID. Se não possuir, criará um novo

10 - Criar a pasta repositories dentro de src
    * Os repositórios são responsáveis por interagir com o banco de dados e devolver uma resposta a rota que o chamou
    * Os métodos dos repositórios que farão as chamadas ao banco de dados
    * As rotas não devem conhecer os mnodelos da aplicação, mas sim os repositórios. Para isso, usamos o conceito de DTO

11 - SOLID
    * SRP => Single Responsibility Principle (Princípio da Responsabilidade Única)
    * OCP => Open-Closed Principle (Princípio Aberto/Fechado)
    * LSP => Liskov Substitution Principle (Princípio de Substituição de Liskov)
    * ISP => Interface Segregation Principle (Princípio de Segregação de Interface)
    * DIP => Dependecy Inversion Principle (Princípio de Inversão de Dependência)

12 - Para tirarmos a responsabilidade de criar uma nova categoria da rota, iremos criar um service prórpio para isso
    * Dentro da pasta src, criar a pasta services
    * Criar a classe CreateCategoryService.ts
    * O service não deve conhecer as informações que vêm de request.body, por isso criamos uma interface IRequest
    * De dentro do service, acessamos o repositório de um domínio dentro do contrutor da classe

13 - Para cada repositório, devemos criar uma interface (contrato) contendo os métodos que são implementados. Assim, caso trocamos o banco de dados da aplicação,
os métodos serão mantidos. Um serviço deve conhecer a interface, e não a implementação.
    * Dentro da pasta repositories, criar a classe ICategoriesRepository.ts

14 - Vamos dividir a aplicação em módulos agrupados por similaridade, criando uma pasta modules dentro de src:
    * Criamos a pasta cars como primeiro módulo
    * Mover a pasta model, repositories e services para dentro da pasta cars

15 - Instalando a biblioteca multer para upload de arquivos:
    * npm install --save multer
    * npm install --save-dev @types/multer
    * Criar uma pasta na raiz do projeto chamada de tmp
    * dentro do arquivo de rotas de categorias, criar uma rota post responsável pelo import do arquivo

16 - Leitura de arquivo csv:
    * npm install csv-parse --save
    * npm install --save-dev @types/csv-parse

17 - Documentando a aplicação com Swagger:
    * npm install swagger-ui-express --save
    * npm install @types/swagger-ui-express --save-dev
    * importamos o swagger dentro de server.ts
    * Criamos o arquivo swagger.json dentro da pasta src
    * Importamos o arquivo para dentro de server.ts
    * No arquivo tsconfig.json, descomentamos a linha "resolveJsonModeules: true"

18 - Docker:
    * Dentro da raiz do projeto criar o arquivo Dockerfile, responsável pelas configurações da nossa aplicação dentro do Docker
    * Imagens oficiais disponíveis dentro do docker: hub.docker.com/search
    * Criar um arquivo na raiz chamado .dockerignore e adicionar a pasta node_modules   
    * Criar arquivo na raiz do projeto chamado docker-compose.yml
    

19 - Comandos docker:
    * Checar a versão do Docker instalada: docker -v
    * Gerando a imagem a partir do Dockerfile: docker build -t "nome_imagem" .
    * Verificar os containers que estão rodando: docker ps -a
    * Rodar nossa imagem criada: docker run -p 3333:3333 car_rental
    * Acessando o container pelo nome: docker exec -it "name_do_container" /bin/bash
    * Rodar o docker-compose: docker-compose up -d
    * Remover um container: docker rm "id_container"
    * Recriando a imagem do docker-compose: docker-compose up --force-recreate
    * Obtendo o IP do container: docker exec "nome_container" cat /etc/hosts

20 - typeORM
    * npm install typeorm --save
    * npm install reflect-metadata --save
    * Utilizaremos neste projeto o driver do Postgres: npm install pg --save
    * No arquivo tsconfig.json, habilitar as duas opções => "emitDecoratorMetadata": true e "experimentalDecorators": true
    * Dentro da pasta scr, criar a pasta database, onde ficará tudo relacionado ao banco de dados
    * Criar na raiz do projeto o arquivo ormconfig.json, na qual receberá os dados de conexão com o banco
    * No arquivo package.json, crair um script para typeorm: "typeorm": "ts-node-dev ./node_modules/typeorm/cli"
    * Dentro da pasta database, criar a pasta migrations
    * Criando a migration de CreateCategory: yarn typeorm migration:create -n CreateCategories
    * Rodar as migrations criadas: npm run typeorm migration:run
    * Remover a última migration: yarn typeorm migration:revert
